apiVersion: v1
kind: ConfigMap
metadata:
  name: "s-prophet-tracing"
data:
  uptrace.yml: |
    ## Uptrace configuration file.
    ## See https://uptrace.dev/get/config.html for details.
    ch:
      addr: localhost:9000
      user: default
      password:
      database: uptrace
      max_execution_time: 30s
    pg:
      addr: localhost:5432
      user: uptrace
      password: uptrace
      database: uptrace
    projects:
      - id: 1
        name: Uptrace
        # Token grants write access to the project. Keep a secret.
        token: project1_secret_token
        pinned_attrs:
          - service
          - host_name
          - deployment_environment
        # Group spans by deployment.environment attribute. 
        group_by_env: false
        # Group funcs spans by service.name attribute.
        group_funcs_by_service: false
        # Enable prom_compat if you want to use the project as a Prometheus datasource in Grafana.
        prom_compat: true
      - id: 2
        name: "Development"
        token: development_secret_token
        pinned_attrs:
          - service
          - host_name
          - deployment_environment
        # Group spans by deployment.environment attribute.
        group_by_env: false
        # Group funcs spans by service.name attribute.
        group_funcs_by_service: false
        prom_compat: true
    auth:
      users:
        - name: Anonymous
          email: uptrace@localhost
          password: uptrace
          notify_by_email: true
    ch_schema:
      compression: ZSTD(3)
      replicated: false
      spans:
        ttl_delete: 7 DAY
        storage_policy: 'default'
      metrics:
        ttl_delete: 30 DAY
        storage_policy: 'default'
    listen:
      # OTLP/gRPC API.
      grpc:
        addr: ':14317'
      # OTLP/HTTP API and Uptrace API with UI.
      http:
        addr: ':14318'
    metrics:
      drop_attrs:
        - telemetry.sdk.language
        - telemetry.sdk.name
        - telemetry.sdk.version
    uptrace_go:
      disabled: true
    logs:
      level: INFO
    # Secret key that is used to sign JWT tokens etc.
    secret_key: 102c1a557c314fc28198acd017960843
    # Enable to log HTTP requests and database queries.
    debug: false

  prometheus.yml: |
    global:
      scrape_interval: 15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.
      evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.
    scrape_configs:
      - job_name: aggregated-trace-metrics
        static_configs:
          - targets: [ 'otel:8889' ]
  collector.yml: |
    extensions:
      health_check:
    receivers:
      otlp:
        protocols:
          grpc:
          http:
      postgresql:
        endpoint: postgres:5432
        transport: tcp
        username: uptrace
        password: uptrace
        databases:
          - uptrace
        tls:
          insecure: true
      prometheus/otelcol:
        config:
          scrape_configs:
            - job_name: 'otelcol'
              scrape_interval: 10s
              static_configs:
                - targets: ['0.0.0.0:8888']
    
    processors:
      resourcedetection:
        detectors: ['system']
      batch:
        send_batch_size: 10000
        timeout: 10s
    exporters:
      otlp/uptrace:
        endpoint: http://localhost:14317
        tls: { insecure: true }
        headers: { 'uptrace-dsn': 'http://development_secret_token@localhost:14318?grpc=14317' }
      prometheusremotewrite/uptrace:
        endpoint: 'http://localhost:14318/api/v1/prometheus/write'
        tls:
          insecure: true
        headers: { 'uptrace-dsn': 'http://development_secret_token@localhost:14318?grpc=14317' }
    service:
      telemetry:
        metrics:
          address: ':8888'
      pipelines:
        traces:
          receivers: [otlp]
          processors: [batch]
          exporters: [otlp/uptrace]
        metrics:
          receivers: [otlp]
          processors: [batch]
          exporters: [otlp/uptrace]
        logs:
          receivers: [otlp]
          processors: [batch]
          exporters: [otlp/uptrace]
        metrics/prom:
          receivers: [prometheus/otelcol]
          processors: [batch]
          exporters: [prometheusremotewrite/uptrace]

---
apiVersion: 'apps/v1'
kind: 'Deployment'
metadata:
  name: 's-prophet-tracing'
spec:
  selector:
    matchLabels:
      app: 's-prophet-tracing'
  template:
    spec:
      restartPolicy: 'Always'
      containers:
        - name: uptrace
          image: docker.io/uptrace/uptrace:1.7.6
          restartPolicy: on-failure
          ports:
            - containerPort: 14317
              hostPort: 14317
            - containerPort: 14318
              hostPort: 14318
          volumeMounts:
            - mountPath: "/etc/uptrace/"
              name: "config"
        - name: postgres
          image: docker.io/postgres:16.3-alpine
          env:
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
            - name: POSTGRES_USER
              value: uptrace
            - name: POSTGRES_PASSWORD
              value: uptrace
          ports:
            - containerPort: 5432
        - name: clickhouse
          image: docker.io/clickhouse/clickhouse-server:24.7
          env:
            - name: CLICKHOUSE_DB
              value: uptrace
          volumeMounts:
            - mountPath: "/var/lib/clickhouse"
              name: "clickhouse"
          ports:
            - containerPort: 8123
            - containerPort: 9000
        - name: collector
          image: ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib:0.106.1
          ports:
            - containerPort: 4317
              hostPort: 4317
          args:
            - "--config"
            - "/etc/config/collector.yml"
          volumeMounts:
            - mountPath: "/etc/config/"
              name: config
        - name: prometheus
          image: docker.io/prom/prometheus:v2.53.1
          args:
            - "--config.file=/etc/config/prometheus.yml"
          ports:
            - containerPort: 9090
          volumeMounts:
            - mountPath: "/etc/config/"
              name: config
      volumes:
        - name: "clickhouse"
          persistentVolumeClaim:
            claimName: "clickhouse"
        - name: "config"
          configMap:
            name: "s-prophet-tracing"