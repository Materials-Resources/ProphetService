apiVersion: v1
kind: ConfigMap
metadata:
  name: "prophet-application-metrics-config"
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.
      evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.
      # scrape_timeout is set to the global default (10s).
    scrape_configs:
      - job_name: aggregated-trace-metrics
        static_configs:
          - targets: [ 'otel:8889' ]
  collector.yml: |
    receivers:
      jaeger:
        protocols:
          thrift_http:
            endpoint: "0.0.0.0:14278"

      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:4318

    connectors:
      spanmetrics:
        histogram:
          explicit:
            buckets: [100us, 1ms, 2ms, 6ms, 10ms, 100ms, 250ms]
        dimensions:
          - name: http.method
            default: GET
          - name: http.status_code
        exemplars:
          enabled: true
        exclude_dimensions: ['status.code']
        dimensions_cache_size: 1000
        aggregation_temporality: "AGGREGATION_TEMPORALITY_CUMULATIVE"
        metrics_flush_interval: 15s
        events:
          enabled: true
          dimensions:
            - name: exception.type
            - name: exception.message
        resource_metrics_key_attributes:
          - service.name
          - telemetry.sdk.language
          - telemetry.sdk.name

    exporters:
      prometheus:
        endpoint: "0.0.0.0:8889"

      otlp:
        endpoint: jaeger:4317
        tls:
          insecure: true

    processors:
      batch:

    service:
      pipelines:
        traces:
          receivers: [otlp]
          exporters: [spanmetrics, otlp]
        metrics:
          receivers: [spanmetrics]
          exporters: [prometheus]
---
apiVersion: 'apps/v1'
kind: 'Deployment'
metadata:
  name: 'prophet-application-metrics'
spec:
  selector:
    matchLabels:
      app: 'application-metrics'
  template:
    spec:
      containers:
        - name: collector
          image: ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib:0.94.0
          ports:
            - containerPort: 4317
              hostPort: 4317
            - containerPort: 4318
              hostPort: 4318
          args:
            - "--config"
            - "/etc/config/collector.yml"
          volumeMounts:
            - mountPath: "/etc/config/"
              name: config
        - name: jaeger
          image: jaegertracing/all-in-one:1.54
          ports:
            - containerPort: 16686
              hostPort: 16686
            - containerPort: 14250
              hostPort: 14250
            - containerPort: 4317
          args:
            - "--memory.max-traces=10000"
          env:
            - name: LOG_LEVEL
              value: "debug"
            - name: METRICS_STORAGE_TYPE
              value: "prometheus"
            - name: PROMETHEUS_SERVER_URL
              value: "http://localhost:9090"
            - name: PROMETHEUS_QUERY_SUPPORT_SPANMETRICS_CONNECTOR
              value: "true"
            - name: PROMETHEUS_QUERY_NORMALIZE_CALLS
              value: "true"
            - name: PROMETHEUS_QUERY_NORMALIZE_DURATION
              value: "true"
        - name: prometheus
          image: quay.io/prometheus/prometheus:v2.51.2
          args:
            - "--config.file=/etc/config/prometheus.yml"
          ports:
            - containerPort: 9090
              hostPort: 9090
          volumeMounts:
            - mountPath: "/etc/config/"
              name: config
      volumes:
        - name: "config"
          configMap:
            name: "prophet-application-metrics-config"
