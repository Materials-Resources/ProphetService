// Code generated by mockery v2.40.1. DO NOT EDIT.

package repomocks

import (
	entities "github.com/materials-resources/s_prophet/pkg/domain/entities"
	mock "github.com/stretchr/testify/mock"
)

// CatalogRepository is an autogenerated mock type for the CatalogRepository type
type CatalogRepository struct {
	mock.Mock
}

// CreateGroup provides a mock function with given fields:
func (_m *CatalogRepository) CreateGroup() {
	_m.Called()
}

// CreateProduct provides a mock function with given fields:
func (_m *CatalogRepository) CreateProduct() {
	_m.Called()
}

// DeleteGroup provides a mock function with given fields:
func (_m *CatalogRepository) DeleteGroup() {
	_m.Called()
}

// DeleteProduct provides a mock function with given fields:
func (_m *CatalogRepository) DeleteProduct() {
	_m.Called()
}

// FindGroupByID provides a mock function with given fields: id
func (_m *CatalogRepository) FindGroupByID(id string) (*entities.ValidatedProductGroup, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindGroupByID")
	}

	var r0 *entities.ValidatedProductGroup
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entities.ValidatedProductGroup, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *entities.ValidatedProductGroup); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.ValidatedProductGroup)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindProductByID provides a mock function with given fields: id
func (_m *CatalogRepository) FindProductByID(id string) (*entities.ValidatedProduct, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindProductByID")
	}

	var r0 *entities.ValidatedProduct
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entities.ValidatedProduct, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *entities.ValidatedProduct); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.ValidatedProduct)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListGroup provides a mock function with given fields:
func (_m *CatalogRepository) ListGroup() ([]*entities.ValidatedProductGroup, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListGroup")
	}

	var r0 []*entities.ValidatedProductGroup
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*entities.ValidatedProductGroup, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*entities.ValidatedProductGroup); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.ValidatedProductGroup)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadProductByGroup provides a mock function with given fields: id
func (_m *CatalogRepository) ReadProductByGroup(id string) ([]*entities.ValidatedProduct, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for ReadProductByGroup")
	}

	var r0 []*entities.ValidatedProduct
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*entities.ValidatedProduct, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) []*entities.ValidatedProduct); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.ValidatedProduct)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateGroup provides a mock function with given fields:
func (_m *CatalogRepository) UpdateGroup() {
	_m.Called()
}

// UpdateProduct provides a mock function with given fields:
func (_m *CatalogRepository) UpdateProduct() {
	_m.Called()
}

// NewCatalogRepository creates a new instance of CatalogRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCatalogRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CatalogRepository {
	mock := &CatalogRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
